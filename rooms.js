// rooms.js (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
class RoomManager {
    static async loadRoomsForServer(client, serverId) {
        try {
            console.log('[ROOMS] loadRoomsForServer ‚Äî –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
            console.log(`[ROOMS] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: client=${client ? '–æ–±—ä–µ–∫—Ç' : 'null'}, serverId=${serverId}`);
            
            client.currentServerId = serverId;
            console.log(`[ROOMS] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π serverId: ${client.currentServerId}`);
            
            client.currentServer = client.servers.find(s => s.id === serverId) || null;
            console.log('[ROOMS] –¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä:', client.currentServer);
            
            UIManager.updateStatus(client, '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç...', 'connecting');
            
            console.log(`[ROOMS] –ó–∞–ø—Ä–æ—Å –∫–æ–º–Ω–∞—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: ${serverId}`);
            console.log(`[ROOMS] URL –∑–∞–ø—Ä–æ—Å–∞: ${client.API_SERVER_URL}/api/servers/${serverId}/rooms`);
            console.log(`[ROOMS] –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${client.token ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
            
            const res = await fetch(`${client.API_SERVER_URL}/api/servers/${serverId}/rooms`, {
                headers: { 
                    'Authorization': `Bearer ${client.token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            console.log(`[ROOMS] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.status} ${res.statusText}`);
            
            if (!res.ok) {
                console.error(`[ROOMS] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç: ${res.status} ${res.statusText}`);
                const errorData = await res.json().catch(() => ({}));
                console.error('[ROOMS] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorData);
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã: ${errorData.error || res.statusText}`);
            }
            
            const data = await res.json();
            console.log(`[ROOMS] –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: ${data.rooms ? data.rooms.length : 0}`, data.rooms);
            
            if (!data || !Array.isArray(data.rooms)) {
                console.error('[ROOMS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', data);
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            }
            
            RoomManager.renderMobileRooms(client, data.rooms);
            RoomManager.renderDesktopRooms(client, data.rooms);
            
            UIManager.updateStatus(client, '–ö–æ–º–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'normal');
            
        } catch (error) {
            console.error('[ROOMS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–Ω–∞—Ç:', error);
            UIManager.addMessage(client, 'System', `–û—à–∏–±–∫–∞: ${error.message}`);
            UIManager.updateStatus(client, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç', 'disconnected');
        }
    }
    
    static renderMobileRooms(client, rooms) {
        console.log('[ROOMS] renderMobileRooms ‚Äî –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
        console.log(`[ROOMS] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${rooms.length}`);
        
        const list = document.querySelector('.room-selector-panel .rooms-list');
        console.log('[ROOMS] –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ .room-selector-panel .rooms-list');
        
        if (!list) {
            console.error('[ROOMS] –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç .room-selector-panel .rooms-list');
            return;
        }
        
        console.log('[ROOMS] –≠–ª–µ–º–µ–Ω—Ç .room-selector-panel .rooms-list –Ω–∞–π–¥–µ–Ω');
        
        list.innerHTML = '';
        console.log('[ROOMS] –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –æ—á–∏—â–µ–Ω');
        
        console.log('[ROOMS] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –≤ –º–æ–±–∏–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫:');
        rooms.forEach((room, index) => {
            console.log(`  [${index}] ${room.name} (ID: ${room.id}, –¢–∏–ø: ${room.type})`);
            
            const el = document.createElement('div');
            el.className = 'room-item';
            el.dataset.room = room.id;
            el.dataset.type = room.type;
            const isOwner = room.ownerId === client.userId;
            el.innerHTML = `${room.type === 'voice' ? 'üîä' : 'üí¨'} ${room.name} ${isOwner ? '<span class="room-owner">(–í—ã)</span>' : ''}`;
            
            el.addEventListener('click', () => {
                console.log(`[ROOMS] –ö–ª–∏–∫ –ø–æ –∫–æ–º–Ω–∞—Ç–µ: ${room.name} (ID: ${room.id})`);
                UIManager.closePanel(client, client.roomSelectorPanel);
                client.currentRoom = room.id;
                RoomManager.reconnectToRoom(client, room.id);
            });
            
            list.appendChild(el);
        });
        
        console.log('[ROOMS] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –≤ –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
        const btn = document.createElement('div');
        btn.className = 'room-item create-room-btn mobile-create-room-btn';
        btn.innerHTML = '<span>+</span> –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É';
        
        const handleClick = (e) => {
            e.stopPropagation();
            e.preventDefault();
            console.log('[ROOMS] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
            RoomManager.createRoom(client);
        };
        
        btn.addEventListener('click', handleClick);
        btn.addEventListener('touchstart', handleClick);
        
        list.appendChild(btn);
        console.log('[ROOMS] –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–±–∏–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫');
    }
    
    static renderDesktopRooms(client, rooms) {
        console.log('[ROOMS] renderDesktopRooms ‚Äî –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
        console.log(`[ROOMS] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${rooms.length}`);
        
        console.log('[ROOMS] –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ .rooms-list (–¥–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
        const list = document.querySelector('.sidebar .rooms-list');
        
        if (!list) {
            console.error('[ROOMS] –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç .rooms-list');
            return;
        }
        
        console.log('[ROOMS] –≠–ª–µ–º–µ–Ω—Ç .rooms-list –Ω–∞–π–¥–µ–Ω (–¥–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
        
        const existingCreateBtn = list.querySelector('.create-room-btn');
        if (existingCreateBtn) {
            console.log('[ROOMS] –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
            existingCreateBtn.remove();
        }
        
        console.log('[ROOMS] –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç (–∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è)');
        Array.from(list.children).forEach(child => {
            if (!child.classList.contains('create-room-btn')) {
                child.remove();
            }
        });
        
        console.log('[ROOMS] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –≤ –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π —Å–ø–∏—Å–æ–∫:');
        rooms.forEach((room, index) => {
            console.log(`  [${index}] ${room.name} (ID: ${room.id}, –¢–∏–ø: ${room.type})`);
            
            const el = document.createElement('div');
            el.className = 'room-item';
            el.dataset.room = room.id;
            el.dataset.type = room.type;
            const isOwner = room.ownerId === client.userId;
            el.innerHTML = `${room.type === 'voice' ? 'üîä' : 'üí¨'} ${room.name} ${isOwner ? '<span class="room-owner">(–í—ã)</span>' : ''}`;
            
            el.addEventListener('click', () => {
                console.log(`[ROOMS] –ö–ª–∏–∫ –ø–æ –∫–æ–º–Ω–∞—Ç–µ: ${room.name} (ID: ${room.id})`);
                list.querySelectorAll('.room-item').forEach(i => i.classList.remove('active'));
                el.classList.add('active');
                client.currentRoom = room.id;
                RoomManager.reconnectToRoom(client, room.id);
            });
            
            list.appendChild(el);
        });
        
        console.log('[ROOMS] –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏');
        const btn = document.createElement('div');
        btn.className = 'room-item create-room-btn desktop-create-room-btn';
        btn.innerHTML = '<span>+</span> –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É';
        btn.style.order = '-1';
        
        const handleClick = (e) => {
            e.stopPropagation();
            e.preventDefault();
            console.log('[ROOMS] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã (–¥–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
            RoomManager.createRoom(client);
        };
        
        btn.addEventListener('click', handleClick);
        
        list.insertBefore(btn, list.firstChild);
        console.log('[ROOMS] –ö–ù–û–ü–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–û–ú–ù–ê–¢–´ –î–û–ë–ê–í–õ–ï–ù–ê –í –ù–ê–ß–ê–õ–û –°–ü–ò–°–ö–ê');
    }
    
    static async createRoom(client) {
        if (client.isCreatingRoom) return;
        client.isCreatingRoom = true;

        try {
            const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:');
            if (!name || name.length < 3) {
                alert('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤');
                return;
            }
            const type = confirm('–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞?') ? 'voice' : 'text';

            console.log(`[ROOMS] –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: ${name}, —Ç–∏–ø: ${type}`);

            const res = await fetch(`${client.API_SERVER_URL}/api/rooms`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${client.token}`
                },
                body: JSON.stringify({
                    serverId: client.currentServerId,
                    name: name.trim(),
                    type: type,
                    userId: client.userId,
                    token: client.token
                })
            });

            if (!res.ok) {
                const errorData = await res.json().catch(() => ({}));
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: ${errorData.error || res.statusText}`);
            }

            UIManager.addMessage(client, 'System', `–ö–æ–º–Ω–∞—Ç–∞ "${name}" —Å–æ–∑–¥–∞–Ω–∞!`);
            await RoomManager.loadRoomsForServer(client, client.currentServerId);

        } catch (error) {
            console.error('[ROOMS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã:', error);
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        } finally {
            client.isCreatingRoom = false;
        }
    }    
        
    static async reconnectToRoom(client, roomId) {
        console.log(`[ROOMS] reconnectToRoom: ${roomId}`);
        client.disconnectFromMedia();
        client.destroySocket();
        client.currentRoom = roomId;
        await client.joinRoom(roomId);
    }
}
