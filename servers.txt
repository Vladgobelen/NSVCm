–º–µ–¥–∏–∞ —Å–µ—Ä–≤–µ—Ä:
const express = require('express');
const mediasoup = require('mediasoup');
const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const app = express();

// ==================== –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ====================
const DATA_DIR = path.join(__dirname, 'data');
const ROOMS_DIR = path.join(DATA_DIR, 'rooms');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
[DATA_DIR, ROOMS_DIR].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);
const unlink = promisify(fs.unlink);
const readdir = promisify(fs.readdir);

// –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞
async function loadJsonFile(filePath, defaultValue = null) {
  try {
    if (fs.existsSync(filePath)) {
      const data = await readFile(filePath, 'utf-8');
      return JSON.parse(data);
    }
    return defaultValue;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
    return defaultValue;
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
async function saveJsonFile(filePath, data) {
  try {
    await writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error);
    return false;
  }
}

// ==================== CORS ====================
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Client-ID, Authorization');
    if (req.method === 'OPTIONS') {
        res.sendStatus(200);
    } else {
        next();
    }
});
app.use(express.json({ limit: '50mb' }));
app.use(express.text({ limit: '50mb' }));

// ==================== –•—Ä–∞–Ω–∏–ª–∏—â–µ ====================
const rooms = new Map(); // roomId ‚Üí { router, transports, producers, consumers, name }
const activeClients = new Map(); // clientId ‚Üí { roomId, timestamp, lastActivity }
const clientProducers = new Map(); // clientId ‚Üí [producerId]
const clientTransports = new Map(); // clientId ‚Üí { sendTransport, recvTransport }

// ==================== Mediasoup Worker ====================
let worker;
async function run() {
    try {
        worker = await mediasoup.createWorker({
            logLevel: 'warn',
            rtcMinPort: 10000,
            rtcMaxPort: 50000,
        });
        worker.on('died', () => {
            console.error('‚ùå Mediasoup worker died');
            process.exit(1);
        });
        console.log('‚úÖ Mediasoup worker –∑–∞–ø—É—â–µ–Ω');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
        await loadRooms();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        startStatsLogging();
        
        const server = app.listen(38592, '0.0.0.0', () => {
            console.log('üöÄ Mediasoup API Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 38592');
            console.log('‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–Ω–∞—Ç: general, music, conference');
            console.log('üåê –í–Ω–µ—à–Ω–∏–π IP: 194.31.171.29');
            console.log('üîß WebRTC –ø–æ—Ä—Ç—ã: 10000‚Äì50000');
        });
        process.on('SIGINT', () => {
            console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
            server.close();
            process.exit(0);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ worker:', error);
        process.exit(1);
    }
}

// ==================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ====================
function startStatsLogging() {
    setInterval(() => {
        console.log('=== –ê–£–î–ò–û –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
        console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${activeClients.size}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ
        activeClients.forEach((data, clientId) => {
            const inactiveTime = Date.now() - data.lastActivity;
            console.log(`üë§ –ö–ª–∏–µ–Ω—Ç ${clientId}: –∫–æ–º–Ω–∞—Ç–∞ ${data.roomId}, –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ${inactiveTime}ms`);
        });
        
        rooms.forEach((room, roomId) => {
            console.log(`–ö–æ–º–Ω–∞—Ç–∞: ${roomId} (${room.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'})`);
            console.log(`  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏: ${room.producers.size}`);
            console.log(`  –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏: ${room.consumers.size}`);
            console.log(`  –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã: ${room.transports.size}`);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ
            room.producers.forEach((producer, producerId) => {
                console.log(`  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å ${producerId}: ${producer.kind} - –∫–ª–∏–µ–Ω—Ç: ${producer.appData.clientID}`);
                console.log(`    –¢–∏–ø: ${producer.type}, paused: ${producer.paused}`);
                
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–º–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞)
                producer.getStats().then(stats => {
                    console.log(`    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${JSON.stringify(stats)}`);
                }).catch(err => {
                    console.log(`    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${err.message}`);
                });
            });
        });
        console.log('========================');
    }, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
}

// ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–∞–º–∏ ====================
async function loadRooms() {
  try {
    const roomFiles = await readdir(ROOMS_DIR);
    for (const file of roomFiles) {
      if (file.endsWith('.json')) {
        const roomId = file.substring(0, file.length - 5); // –£–±–∏—Ä–∞–µ–º '.json'
        const roomData = await loadJsonFile(path.join(ROOMS_DIR, file));
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!rooms.has(roomId)) {
          await createRoom(roomId, roomData.name);
        }
      }
    }
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–Ω–∞—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤: ${rooms.size}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
  }
}

async function saveRoom(roomId, name) {
  try {
    const roomFile = path.join(ROOMS_DIR, `${roomId}.json`);
    await saveJsonFile(roomFile, {
      id: roomId,
      name: name,
      createdAt: new Date().toISOString()
    });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, error);
  }
}

async function deleteRoom(roomId) {
  try {
    const roomFile = path.join(ROOMS_DIR, `${roomId}.json`);
    if (fs.existsSync(roomFile)) {
      await unlink(roomFile);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, error);
  }
}

async function createRoom(roomId, name = roomId) {
    if (rooms.has(roomId)) {
        console.log(`‚ö† –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        return rooms.get(roomId);
    }
    const mediaCodecs = [
        {
            kind: 'audio',
            mimeType: 'audio/opus',
            clockRate: 48000,
            channels: 2,
            parameters: {
                'maxaveragebitrate': 32000,
                'usedtx': 1,
                'useinbandfec': 1,
            },
        }
    ];
    let router;
    try {
        router = await worker.createRouter({ mediaCodecs });
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è router –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, error);
        throw error;
    }
    const transports = new Map(); // transportId ‚Üí transport
    const producers = new Map(); // producerId ‚Üí producer
    const consumers = new Map(); // consumerId ‚Üí consumer
    const room = {
        router,
        transports,
        producers,
        consumers,
        name: name
    };
    
    rooms.set(roomId, room);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    await saveRoom(roomId, name);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${roomId} (${name})`);
    return room;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
function updateClientActivity(clientId, roomId) {
    const now = Date.now();
    if (activeClients.has(clientId)) {
        const clientData = activeClients.get(clientId);
        clientData.lastActivity = now;
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}, –∫–æ–º–Ω–∞—Ç–∞: ${roomId}`);
    } else {
        activeClients.set(clientId, {
            roomId,
            timestamp: now,
            lastActivity: now
        });
        console.log(`üë§ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç ${clientId}, –∫–æ–º–Ω–∞—Ç–∞: ${roomId}`);
    }
}

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 60 —Å–µ–∫—É–Ω–¥)
setInterval(() => {
    const now = Date.now();
    const inactiveTimeout = 60000; // 60 —Å–µ–∫—É–Ω–¥
    
    for (const [clientId, data] of activeClients) {
        const inactiveTime = now - data.lastActivity;
        
        if (inactiveTime > inactiveTimeout) {
            console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: ${clientId} (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ${inactiveTime}ms)`);
            const transports = clientTransports.get(clientId);
            const room = rooms.get(data.roomId);
            
            if (room) {
                if (transports?.sendTransport) {
                    const transport = room.transports.get(transports.sendTransport);
                    if (transport) transport.close();
                    room.transports.delete(transports.sendTransport);
                }
                if (transports?.recvTransport) {
                    const transport = room.transports.get(transports.receiveTransport);
                    if (transport) transport.close();
                    room.transports.delete(transports.receiveTransport);
                }
                const producers = clientProducers.get(clientId) || [];
                producers.forEach(pid => {
                    const producer = room.producers.get(pid);
                    if (producer) {
                        producer.close();
                        room.producers.delete(pid);
                    }
                });
            }
            activeClients.delete(clientId);
            clientTransports.delete(clientId);
            clientProducers.delete(clientId);
        } else if (inactiveTime > 30000) {
            console.log(`‚ö† –ö–ª–∏–µ–Ω—Ç ${clientId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ${inactiveTime}ms (–ø–æ—Ä–æ–≥: ${inactiveTimeout}ms)`);
        }
    }
}, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

// ==================== API ====================
// Health check - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
app.post('/api/health', async (req, res) => {
    console.log('[HEALTH] –ü–æ–ª—É—á–µ–Ω keep-alive –∑–∞–ø—Ä–æ—Å', req.body);
    const { clientId, roomId } = req.body;

    if (!clientId || !roomId) {
        console.log('[HEALTH] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç clientId –∏–ª–∏ roomId');
        return res.status(400).json({ error: 'Missing clientId or roomId' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    updateClientActivity(clientId, roomId);
    
    console.log(`[HEALTH] ‚úÖ Keep-alive –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId} –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
    res.json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        clientId: clientId,
        roomId: roomId
    });
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã
app.get('/api/room/:roomId/producers', async (req, res) => {
    const { roomId } = req.params;
    console.log(`[ROOM] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);
    const room = rooms.get(roomId);
    if (!room) {
        console.log(`[ROOM] –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return res.status(404).json({ error: 'Room not found' });
    }
    
    const producers = Array.from(room.producers.values()).map(producer => ({
        id: producer.id,
        clientID: producer.appData.clientID,
        kind: producer.kind,
        paused: producer.paused
    }));
    
    console.log(`[ROOM] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π: ${producers.length}`);
    res.json({ producers });
});

// –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
app.post('/api/rooms/create', async (req, res) => {
    const { roomId, name } = req.body;
    console.log(`[ROOMS] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);
    try {
        await createRoom(roomId, name || roomId);
        res.json({ success: true });
    } catch (error) {
        console.error('[ROOMS] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        res.status(500).json({ error: 'Failed to create room' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å RTP capabilities
app.get('/api/rtp-capabilities/:roomId', async (req, res) => {
    const { roomId } = req.params;
    console.log(`[RTP] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ RTP capabilities –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);
    const room = rooms.get(roomId);
    if (!room) {
        console.log(`[RTP] –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return res.status(404).json({ error: 'Room not found' });
    }
    res.json(room.router.rtpCapabilities);
});

// –°–æ–∑–¥–∞—Ç—å transport
app.post('/api/transport/create', async (req, res) => {
    const { direction, roomId, clientID } = req.body;
    console.log(`[TRANSPORT] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ transport: direction=${direction}, roomId=${roomId}, clientID=${clientID}`);
    const room = rooms.get(roomId);
    if (!room) {
        console.log(`[TRANSPORT] –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return res.status(404).json({ error: 'Room not found' });
    }
    let transport;
    try {
        transport = await room.router.createWebRtcTransport({
            listenIps: [
                { ip: '0.0.0.0', announcedIp: '194.31.171.29' }
            ],
            enableUdp: true,
            enableTcp: true,
            preferUdp: true,
            appData: { clientID, roomId }
        });
    } catch (error) {
        console.error(`[TRANSPORT] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è transport –¥–ª—è ${direction}:`, error);
        return res.status(500).json({ error: 'Transport creation failed' });
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º transport
    room.transports.set(transport.id, transport);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    if (!clientTransports.has(clientID)) {
        clientTransports.set(clientID, {});
    }
    clientTransports.get(clientID)[`${direction}Transport`] = transport.id;
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    updateClientActivity(clientID, roomId);
    console.log(`[TRANSPORT] –°–æ–∑–¥–∞–Ω transport: id=${transport.id}, direction=${direction}, roomId=${roomId}, clientID=${clientID}`);
    res.json({
        transportId: transport.id,
        iceParameters: transport.iceParameters,
        iceCandidates: transport.iceCandidates,
        dtlsParameters: transport.dtlsParameters
    });
});

// –ü–æ–¥–∫–ª—é—á–∏—Ç—å transport
app.post('/api/transport/connect', async (req, res) => {
    const { transportId, dtlsParameters } = req.body;
    console.log(`[TRANSPORT] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ transport: ${transportId}`);
    console.log(`[TRANSPORT] DTLS –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(dtlsParameters)}`);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!transportId || !dtlsParameters) {
        return res.status(400).json({ error: 'Missing required fields: transportId, dtlsParameters' });
    }

    let connected = false;
    for (const room of rooms.values()) {
        const transport = room.transports.get(transportId);
        if (transport) {
            try {
                await transport.connect({ dtlsParameters });
                console.log(`[TRANSPORT] Transport ${transportId} –ø–æ–¥–∫–ª—é—á—ë–Ω`);
                connected = true;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
                const clientID = transport.appData.clientID;
                const roomId = transport.appData.roomId;
                if (clientID && roomId) {
                    updateClientActivity(clientID, roomId);
                }
                
                break;
            } catch (error) {
                console.error(`[TRANSPORT] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è transport ${transportId}:`, error);
                return res.status(500).json({ error: 'DTLS handshake failed' });
            }
        }
    }
    if (!connected) {
        console.log(`[TRANSPORT] Transport ${transportId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.status(404).json({ error: 'Transport not found' });
    }
    res.json({ success: true });
});

// Produce
app.post('/api/produce', async (req, res) => {
    const { transportId, kind, rtpParameters } = req.body;
    console.log(`[PRODUCE] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é: transport=${transportId}, kind=${kind}`);
    console.log(`[PRODUCE] RTP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(rtpParameters)}`);
    
    let produced = false;
    for (const room of rooms.values()) {
        const transport = room.transports.get(transportId);
        if (transport) {
            try {
                const producer = await transport.produce({ kind, rtpParameters });
                const clientID = transport.appData.clientID;
                const roomId = transport.appData.roomId;
                
                producer.appData = {
                    clientID,
                    roomId
                };
                
                room.producers.set(producer.id, producer);
                if (!clientProducers.has(clientID)) {
                    clientProducers.set(clientID, []);
                }
                clientProducers.get(clientID).push(producer.id);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
                updateClientActivity(clientID, roomId);
                
                console.log(`[PRODUCE] –°–æ–∑–¥–∞–Ω producer: ${producer.id} (kind: ${kind}), clientID: ${clientID}, roomId: ${roomId}`);
                res.json({ producerId: producer.id });
                produced = true;
                break;
            } catch (error) {
                console.error(`[PRODUCE] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è producer:`, error);
                return res.status(500).json({ error: 'Produce failed' });
            }
        }
    }
    if (!produced) {
        console.log(`[PRODUCE] Transport ${transportId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        res.status(404).json({ error: 'Transport not found' });
    }
});

// Consume
app.post('/api/consume', async (req, res) => {
    const { producerId, rtpCapabilities, transportId } = req.body;
    console.log(`[CONSUME] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: producer=${producerId}, transport=${transportId}`);
    console.log(`[CONSUME] RTP capabilities: ${JSON.stringify(rtpCapabilities)}`);
    
    let consumed = false;
    for (const room of rooms.values()) {
        const transport = room.transports.get(transportId);
        const producer = room.producers.get(producerId);
        if (transport && producer && room.router.canConsume({ producerId, rtpCapabilities })) {
            try {
                const consumer = await transport.consume({
                    producerId,
                    rtpCapabilities,
                    paused: false
                });
                room.consumers.set(consumer.id, consumer);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
                const clientID = transport.appData.clientID;
                const roomId = transport.appData.roomId;
                updateClientActivity(clientID, roomId);
                
                console.log(`[CONSUME] –°–æ–∑–¥–∞–Ω consumer: ${consumer.id} –¥–ª—è producer ${producerId}`);
                res.json({
                    id: consumer.id,
                    producerId: producerId,
                    kind: consumer.kind,
                    rtpParameters: consumer.rtpParameters,
                    type: consumer.type,
                    producerPaused: consumer.producerPaused
                });
                consumed = true;
                break;
            } catch (error) {
                console.error(`[CONSUME] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer:`, error);
                return res.status(500).json({ error: 'Consume failed' });
            }
        }
    }
    if (!consumed) {
        console.log(`[CONSUME] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å consumer –¥–ª—è producer ${producerId}`);
        res.status(404).json({ error: 'Cannot consume' });
    }
});

// Close producer
app.post('/api/producer/close', async (req, res) => {
    const { producerId } = req.body;
    console.log(`[PRODUCER] –ó–∞–∫—Ä—ã—Ç–∏–µ producer: ${producerId}`);
    let closed = false;
    for (const room of rooms.values()) {
        const producer = room.producers.get(producerId);
        if (producer) {
            producer.close();
            room.producers.delete(producerId);
            console.log(`[PRODUCER] Producer ${producerId} –∑–∞–∫—Ä—ã—Ç`);
            closed = true;
            break;
        }
    }
    if (closed) {
        res.json({ success: true });
    } else {
        console.log(`[PRODUCER] Producer ${producerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        res.status(404).json({ error: 'Producer not found' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ producers
app.get('/api/client/:clientId/producers', (req, res) => {
    const { clientId } = req.params;
    console.log(`[CLIENT] –ó–∞–ø—Ä–æ—Å –Ω–∞ producers –∫–ª–∏–µ–Ω—Ç–∞: ${clientId}`);
    const clientData = activeClients.get(clientId);
    if (!clientData) {
        console.log(`[CLIENT] –ö–ª–∏–µ–Ω—Ç ${clientId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.json({ producers: [] });
    }
    const room = rooms.get(clientData.roomId);
    if (!room) {
        console.log(`[CLIENT] –ö–æ–º–Ω–∞—Ç–∞ ${clientData.roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return res.json({ producers: [] });
    }
    const clientProducersList = [];
    for (const [producerId, producer] of room.producers) {
        if (producer.appData.clientID === clientId) {
            clientProducersList.push(producerId);
        }
    }
    console.log(`[CLIENT] Producers –¥–ª—è ${clientId}:`, clientProducersList);
    res.json({ producers: clientProducersList });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
app.get('/api/rooms', (req, res) => {
    console.log('[ROOMS] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
    const roomList = Array.from(rooms.keys()).map(roomId => {
        const room = rooms.get(roomId);
        return {
            id: roomId,
            name: room.name || roomId.charAt(0).toUpperCase() + roomId.slice(1)
        };
    });
    console.log('[ROOMS] –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç:', roomList);
    res.json({ rooms: roomList });
});

// Serve static files
app.use(express.static('public'));

// Serve mediasoup-client
app.get('/mediasoup-client.min.js', (req, res) => {
    res.sendFile(__dirname + '/public/mediasoup-client.min.js');
});

// –ó–∞–ø—É—Å–∫
run();

–ê–ø–∏ —Å–µ—Ä–≤–µ—Ä:
// api-server.jss
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const axios = require('axios');
const bcrypt = require('bcrypt');
const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

app.use(cors());
app.use(express.json());

// ==================== –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ====================
const DATA_DIR = path.join(__dirname, 'data');
const USERS_DIR = path.join(DATA_DIR, 'users');
const SERVERS_DIR = path.join(DATA_DIR, 'servers');
const ROOMS_DIR = path.join(DATA_DIR, 'rooms');

[DATA_DIR, USERS_DIR, SERVERS_DIR, ROOMS_DIR].forEach(dir => {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);
const unlink = promisify(fs.unlink);
const readdir = promisify(fs.readdir);

async function loadJsonFile(filePath, defaultValue = null) {
    try {
        if (fs.existsSync(filePath)) {
            const data = await readFile(filePath, 'utf-8');
            return JSON.parse(data);
        }
        return defaultValue;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
        return defaultValue;
    }
}

async function saveJsonFile(filePath, data) {
    try {
        await writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error);
        return false;
    }
}

async function deleteJsonFile(filePath) {
    try {
        if (fs.existsSync(filePath)) {
            await unlink(filePath);
        }
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error);
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
    const usersIndexFile = path.join(USERS_DIR, 'users.json');
    let usersIndex = await loadJsonFile(usersIndexFile, {});
    const users = new Map();
    for (const [userId, userData] of Object.entries(usersIndex)) {
        const userFile = path.join(USERS_DIR, `${userId}.json`);
        const user = await loadJsonFile(userFile, userData);
        users.set(userId, user);
    }
    return users;
}

async function saveUser(userId, userData) {
    const usersIndexFile = path.join(USERS_DIR, 'users.json');
    let usersIndex = await loadJsonFile(usersIndexFile, {});
    usersIndex[userId] = {
        username: userData.username,
        createdAt: userData.createdAt || new Date().toISOString()
    };
    await saveJsonFile(usersIndexFile, usersIndex);

    const userFile = path.join(USERS_DIR, `${userId}.json`);
    await saveJsonFile(userFile, userData);
    return true;
}

async function deleteUser(userId) {
    const usersIndexFile = path.join(USERS_DIR, 'users.json');
    let usersIndex = await loadJsonFile(usersIndexFile, {});
    delete usersIndex[userId];
    await saveJsonFile(usersIndexFile, usersIndex);

    const userFile = path.join(USERS_DIR, `${userId}.json`);
    await deleteJsonFile(userFile);
    return true;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
async function loadServers() {
    const serversIndexFile = path.join(SERVERS_DIR, 'servers.json');
    let serversIndex = await loadJsonFile(serversIndexFile, {});
    const servers = new Map();
    for (const [serverId, serverData] of Object.entries(serversIndex)) {
        const serverFile = path.join(SERVERS_DIR, `${serverId}.json`);
        const server = await loadJsonFile(serverFile, serverData);
        servers.set(serverId, server);
    }
    return servers;
}

async function saveServer(serverId, serverData) {
    const serversIndexFile = path.join(SERVERS_DIR, 'servers.json');
    let serversIndex = await loadJsonFile(serversIndexFile, {});
    serversIndex[serverId] = {
        name: serverData.name,
        ownerId: serverData.ownerId,
        createdAt: serverData.createdAt
    };
    await saveJsonFile(serversIndexFile, serversIndex);

    const serverFile = path.join(SERVERS_DIR, `${serverId}.json`);
    await saveJsonFile(serverFile, serverData);
    return true;
}

async function deleteServer(serverId) {
    const serversIndexFile = path.join(SERVERS_DIR, 'servers.json');
    let serversIndex = await loadJsonFile(serversIndexFile, {});
    delete serversIndex[serverId];
    await saveJsonFile(serversIndexFile, serversIndex);

    const serverFile = path.join(SERVERS_DIR, `${serverId}.json`);
    await deleteJsonFile(serverFile);
    return true;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç
async function loadRooms() {
    const roomsIndexFile = path.join(ROOMS_DIR, 'rooms.json');
    let roomsIndex = await loadJsonFile(roomsIndexFile, {});
    const rooms = new Map();
    const messages = new Map();
    const participants = new Map();

    for (const [roomId, roomData] of Object.entries(roomsIndex)) {
        const roomFile = path.join(ROOMS_DIR, `${roomId}.json`);
        const room = await loadJsonFile(roomFile, roomData);
        rooms.set(roomId, room);
        messages.set(roomId, room.messages || []);
        participants.set(roomId, new Set(room.participants || []));
    }

    return { rooms, messages, participants };
}

async function saveRoom(roomId, roomData, messagesData, participantsData) {
    const roomsIndexFile = path.join(ROOMS_DIR, 'rooms.json');
    let roomsIndex = await loadJsonFile(roomsIndexFile, {});
    roomsIndex[roomId] = {
        name: roomData.name,
        type: roomData.type,
        serverId: roomData.serverId,
        ownerId: roomData.ownerId,
        createdAt: roomData.createdAt
    };
    await saveJsonFile(roomsIndexFile, roomsIndex);

    const roomFile = path.join(ROOMS_DIR, `${roomId}.json`);
    await saveJsonFile(roomFile, {
        ...roomData,
        messages: messagesData,
        participants: Array.from(participantsData)
    });
    return true;
}

async function deleteRoom(roomId) {
    const roomsIndexFile = path.join(ROOMS_DIR, 'rooms.json');
    let roomsIndex = await loadJsonFile(roomsIndexFile, {});
    delete roomsIndex[roomId];
    await saveJsonFile(roomsIndexFile, roomsIndex);

    const roomFile = path.join(ROOMS_DIR, `${roomId}.json`);
    await deleteJsonFile(roomFile);
    return true;
}

// ==================== –•—Ä–∞–Ω–∏–ª–∏—â–µ ====================
let users = new Map();
let userNames = new Map();
let servers = new Map();
let rooms = new Map();
let messages = new Map();
let participants = new Map();

async function loadData() {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤...');
    users = await loadUsers();
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
    for (const [userId, user] of users) {
        userNames.set(userId, user.username);
    }

    servers = await loadServers();
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${servers.size}`);

    const roomsData = await loadRooms();
    rooms = roomsData.rooms;
    messages = roomsData.messages;
    participants = roomsData.participants;
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: ${rooms.size}`);
    console.log('üéâ –î–∞–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
}

// ==================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====================
const generateId = () => Math.random().toString(36).substr(2, 9);
const generateClientId = () => 'user_' + generateId();
const generateToken = () => 'token_' + Math.random().toString(36).substr(2, 15) + Date.now().toString(36);

// ==================== Middleware ====================
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (!token) {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    let user = null;
    for (const [userId, userData] of users) {
        if (userData.token === token) {
            user = userData;
            req.userId = userId;
            break;
        }
    }

    if (!user) {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
        return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }

    next();
}

// ==================== REST API ====================
app.post('/api/auth', async (req, res) => {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');
    try {
        const { username, password } = req.body;
        if (!username || !password) {
            return res.status(400).json({ error: '–ò–º—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        if (username.trim().length < 3 || username.length > 30) {
            return res.status(400).json({ error: '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤' });
        }
        if (password.length < 4) {
            return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 —Å–∏–º–≤–æ–ª–æ–≤' });
        }

        let userId = null;
        let existingUser = null;
        for (const [id, userData] of users) {
            if (userData.username === username.trim()) {
                userId = id;
                existingUser = userData;
                break;
            }
        }

        if (existingUser) {
            const isPasswordValid = await bcrypt.compare(password, existingUser.passwordHash);
            if (!isPasswordValid) {
                return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
            }
            const newToken = generateToken();
            existingUser.token = newToken;
            users.set(userId, existingUser);
            userNames.set(userId, username.trim());
            await saveUser(userId, existingUser);
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –≤–æ—à–µ–ª, —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω`);
            return res.json({ userId, token: newToken, username: existingUser.username });
        } else {
            const passwordHash = await bcrypt.hash(password, 10);
            userId = generateClientId();
            const token = generateToken();
            const createdAt = new Date().toISOString();
            const newUser = {
                username: username.trim(),
                passwordHash,
                token,
                createdAt,
                servers: [],
                friends: []
            };
            users.set(userId, newUser);
            userNames.set(userId, username.trim());
            await saveUser(userId, newUser);
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}`);
            return res.json({ userId, token, username: username.trim() });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/auth/validate', authenticateToken, (req, res) => {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞');
    const { userId, token } = req.body;
    if (!userId || !token) {
        return res.status(400).json({ valid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç userId –∏–ª–∏ token' });
    }
    const user = users.get(userId);
    if (user && user.token === token) {
        console.log(`‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω`);
        res.json({ valid: true });
    } else {
        console.log(`‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω`);
        res.status(401).json({ valid: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
});

app.get('/api/room/:roomId/producers', authenticateToken, async (req, res) => {
    console.log(`üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã: ${req.params.roomId}`);
    try {
        const { roomId } = req.params;
        const room = rooms.get(roomId);
        if (!room) {
            return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –º–µ–¥–∏–∞—Å–µ—Ä–≤–µ—Ä–∞
        try {
            const mediaServerInternalUrl = 'http://localhost:38592';
            const response = await axios.get(`${mediaServerInternalUrl}/api/room/${roomId}/producers`);
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, response.data.producers);
            res.json(response.data);
        } catch (mediaError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –º–µ–¥–∏–∞—Å–µ—Ä–≤–µ—Ä–∞:`, mediaError.message);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π' });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.get('/api/servers', authenticateToken, (req, res) => {
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${req.userId}`);
    try {
        const userServers = [];
        for (const [id, server] of servers) {
            if (server.ownerId === req.userId || (server.members && server.members.includes(req.userId))) {
                userServers.push(server);
            }
        }
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ (${userServers.length} —à—Ç.) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.userId}`);
        res.json({ servers: userServers });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/servers', authenticateToken, async (req, res) => {
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${req.userId}`);
    try {
        const { name, userId, token } = req.body;
        if (!name || typeof name !== 'string' || name.trim().length < 3) {
            console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞');
            return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–ª–æ–≤' });
        }
        for (const [id, server] of servers) {
            if (server.name === name.trim() && server.ownerId === userId) {
                console.log(`‚ùå –°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                return res.status(400).json({ error: '–°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
            }
        }
        const serverId = 'srv_' + generateId();
        const server = {
            id: serverId,
            name: name.trim(),
            ownerId: userId,
            createdAt: new Date().toISOString(),
            rooms: [],
            members: [userId] // –í–ª–∞–¥–µ–ª–µ—Ü –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        };
        servers.set(serverId, server);
        await saveServer(serverId, server);

        const user = users.get(userId);
        if (user) {
            if (!user.servers) user.servers = [];
            user.servers.push(serverId);
            users.set(userId, user);
            await saveUser(userId, user);
        }
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Å–µ—Ä–≤–µ—Ä: ${serverId} - ${server.name}`);
        res.json({ server });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/servers/:serverId/join', authenticateToken, async (req, res) => {
    console.log(`üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: ${req.params.serverId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${req.userId}`);
    try {
        const { serverId } = req.params;
        const server = servers.get(serverId);
        
        if (!server) {
            return res.status(404).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        if (!server.members) server.members = [];
        if (!server.members.includes(req.userId)) {
            server.members.push(req.userId);
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ ${serverId}`);
        } else {
            console.log(`‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.userId} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞ ${serverId}`);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await saveServer(serverId, server);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = users.get(req.userId);
        if (user) {
            if (!user.servers) user.servers = [];
            if (!user.servers.includes(serverId)) {
                user.servers.push(serverId);
                await saveUser(req.userId, user);
                console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä ${serverId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.userId}`);
            }
        }

        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É ${serverId}`);
        res.json({ server });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.get('/api/servers/:serverId/rooms', authenticateToken, (req, res) => {
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: ${req.params.serverId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${req.userId}`);
    try {
        const { serverId } = req.params;
        const server = servers.get(serverId);
        if (!server) {
            console.log(`‚ùå –°–µ—Ä–≤–µ—Ä ${serverId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return res.status(404).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –≤–ª–∞–¥–µ–ª—å—Ü—É –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Ä–≤–µ—Ä–∞
        const isOwner = server.ownerId === req.userId;
        const isMember = server.members && server.members.includes(req.userId);
        
        if (!isOwner && !isMember) {
            console.log(`‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.userId} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É ${serverId}`);
            return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É' });
        }
        
        const serverRooms = [];
        for (const [id, room] of rooms) {
            if (room.serverId === serverId) {
                serverRooms.push(room);
            }
        }
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç (${serverRooms.length} —à—Ç.) –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${serverId}`);
        res.json({ rooms: serverRooms });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/rooms', authenticateToken, async (req, res) => {
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${req.userId}`);
    try {
        const { serverId, name, type, userId, token } = req.body;
        const server = servers.get(serverId);
        if (!server) {
            console.log(`‚ùå –°–µ—Ä–≤–µ—Ä ${serverId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return res.status(404).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        if (server.ownerId !== userId) {
            console.log(`‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${serverId}`);
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' });
        }
        if (!name || typeof name !== 'string' || name.trim().length < 3) {
            console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã');
            return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤' });
        }
        if (!type || !['voice', 'text'].includes(type)) {
            console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã: ${type}`);
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã' });
        }
        for (const [id, room] of rooms) {
            if (room.name === name.trim() && room.serverId === serverId) {
                console.log(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                return res.status(400).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
            }
        }
        const roomId = `${serverId}-${generateId()}`;
        const room = {
            id: roomId,
            name: name.trim(),
            type: type,
            serverId: serverId,
            ownerId: userId,
            createdAt: new Date().toISOString()
        };
        rooms.set(roomId, room);
        messages.set(roomId, []);
        participants.set(roomId, new Set());

        if (type === 'voice') {
            try {
                const mediaServerInternalUrl = 'http://localhost:38592';
                await axios.post(`${mediaServerInternalUrl}/api/rooms/create`, {
                    roomId: roomId,
                    roomName: name.trim()
                });
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–µ: ${roomId}`);
            } catch (mediaError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–µ:`, mediaError.message);
                rooms.delete(roomId);
                messages.delete(roomId);
                participants.delete(roomId);
                return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É' });
            }
        }

        await saveRoom(roomId, room, messages.get(roomId), participants.get(roomId));

        const serverData = servers.get(serverId);
        if (serverData) {
            if (!serverData.rooms) serverData.rooms = [];
            serverData.rooms.push(roomId);
            servers.set(serverId, serverData);
            await saveServer(serverId, serverData);
        }

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${roomId} - ${room.name} (${type})`);
        res.json({ room, message: '–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.get('/api/rooms', authenticateToken, (req, res) => {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
    try {
        const roomsArray = Array.from(rooms.values());
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç (${roomsArray.length} —à—Ç.)`);
        res.json({ rooms: roomsArray });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/join', authenticateToken, async (req, res) => {
    console.log('üîç [API /JOIN] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É');
    try {
        const { roomId, userId, token, clientId } = req.body;
        if (!roomId || !userId || !token || !clientId) {
            const missing = [];
            if (!roomId) missing.push('roomId');
            if (!userId) missing.push('userId');
            if (!token) missing.push('token');
            if (!clientId) missing.push('clientId');
            console.error(`[API /JOIN] ‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missing.join(', ')}`);
            return res.status(400).json({ error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missing.join(', ')}` });
        }
        const room = rooms.get(roomId);
        if (!room) {
            console.error(`[API /JOIN] ‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–Ω–∞—Ç–∞ —Å ID ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        console.log(`[API /JOIN] ‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: ${roomId}`);
        const server = servers.get(room.serverId);
        if (!server) {
            console.error(`[API /JOIN] ‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä —Å ID ${room.serverId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: —Å–µ—Ä–≤–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        console.log(`[API /JOIN] ‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω: ID=${server.id}, Name=${server.name}`);
        if (!participants.has(roomId)) {
            participants.set(roomId, new Set());
        }
        const roomParticipants = participants.get(roomId);
        roomParticipants.add(clientId);
        if (!messages.has(roomId)) {
            messages.set(roomId, []);
        }
        const joinMessage = {
            type: 'system',
            user: 'System',
            message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ –∫–æ–º–Ω–∞—Ç—É (${clientId})`,
            timestamp: new Date().toISOString()
        };
        messages.get(roomId).push(joinMessage);
        await saveRoom(roomId, room, messages.get(roomId), roomParticipants);
        const user = users.get(userId);
        const username = user ? user.username : `User_${userId.substring(0, 8)}`;
        console.log(`[API /JOIN] üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
        let mediaData = {};
        if (room.type === 'voice') {
            try {
                const mediaServerInternalUrl = 'http://localhost:38592';
                const mediaServerExternalUrl = 'https://ns.fiber-gate.ru';
                
                console.log(`[API /JOIN] –ü–æ–ª—É—á–µ–Ω–∏–µ RTP capabilities –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
                const rtpResponse = await axios.get(`${mediaServerInternalUrl}/api/rtp-capabilities/${roomId}`);
                console.log(`[API /JOIN] ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã RTP capabilities –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
                
                console.log(`[API /JOIN] –°–æ–∑–¥–∞–Ω–∏–µ send transport –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
                const sendTransportResponse = await axios.post(`${mediaServerInternalUrl}/api/transport/create`, {
                    direction: 'send',
                    roomId: roomId,
                    clientID: clientId
                });
                
                console.log(`[API /JOIN] –°–æ–∑–¥–∞–Ω–∏–µ recv transport –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
                const recvTransportResponse = await axios.post(`${mediaServerInternalUrl}/api/transport/create`, {
                    direction: 'recv',
                    roomId: roomId,
                    clientID: clientId
                });
                console.log(`[API /JOIN] ‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
                
                mediaData = {
                    mediaServerUrl: mediaServerExternalUrl,
                    rtpCapabilities: rtpResponse.data,
                    sendTransport: {
                        id: sendTransportResponse.data.transportId,
                        iceParameters: sendTransportResponse.data.iceParameters,
                        iceCandidates: sendTransportResponse.data.iceCandidates,
                        dtlsParameters: sendTransportResponse.data.dtlsParameters
                    },
                    recvTransport: {
                        id: recvTransportResponse.data.transportId,
                        iceParameters: recvTransportResponse.data.iceParameters,
                        iceCandidates: recvTransportResponse.data.iceCandidates,
                        dtlsParameters: recvTransportResponse.data.dtlsParameters
                    }
                };
                
                console.log(`[API /JOIN] –ú–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
            } catch (mediaError) {
                console.error(`[API /JOIN] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–µ–¥–∏–∞—Å–µ—Ä–≤–µ—Ä—É:`, mediaError.message);
                console.error(`[API /JOIN] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, mediaError.response?.data || mediaError.message);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–µ–¥–∏–∞—Å–µ—Ä–≤–µ—Ä—É' });
            }
        }
        console.log(`[API /JOIN] ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É ${clientId} –¥–ª—è –∫–æ–º–Ω–∞—Ç–∞ ${roomId}`);
        return res.json({
            success: true,
            clientId: clientId,
            roomType: room.type,
            roomId: roomId,
            mediaData: mediaData
        });
    } catch (error) {
        console.error('[API /JOIN] ‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É' });
    }
});

// ==================== Socket.IO ====================
io.use((socket, next) => {
    const token = socket.handshake.auth.token;
    const userId = socket.handshake.auth.userId;
    const clientId = socket.handshake.auth.clientId;
    const username = socket.handshake.auth.username;
    if (!token || !userId || !clientId || !username) {
        return next(new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'));
    }
    let user = null;
    for (const [uId, userData] of users) {
        if (userData.token === token && uId === userId) {
            user = userData;
            break;
        }
    }
    if (!user) {
        return next(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'));
    }
    socket.userId = userId;
    socket.clientId = clientId;
    socket.username = username;
    next();
});

io.on('connection', (socket) => {
    console.log(`‚úÖ –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${socket.clientId} (${socket.username})`);
    let currentRoom = null;

    socket.on('join-room', async (data) => {
        const { roomId, clientId } = data;
        console.log(`üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${clientId} (${socket.username}) –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
        if (!roomId) return;

        if (!rooms.has(roomId)) {
            socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }

        if (currentRoom) {
            socket.leave(currentRoom);
            socket.to(currentRoom).emit('user-left', { clientId, username: socket.username });
        }

        socket.join(roomId);
        currentRoom = roomId;

        const roomMessages = messages.get(roomId) || [];
        roomMessages.forEach(msg => socket.emit('new-message', msg));

        socket.to(roomId).emit('user-joined', { clientId, username: socket.username });

        const roomParticipants = participants.get(roomId) || new Set();
        io.to(roomId).emit('participants', { clients: Array.from(roomParticipants) });
    });

    socket.on('send-message', async (data) => {
        const { text, clientId } = data;
        const username = userNames.get(clientId) || '–ê–Ω–æ–Ω–∏–º';
        const message = {
            userId: socket.userId,
            user: username,
            text,
            time: new Date().toISOString()
        };
        const roomMessages = messages.get(currentRoom);
        if (roomMessages) {
            roomMessages.push(message);
            if (roomMessages.length > 100) roomMessages.shift();
            const room = rooms.get(currentRoom);
            if (room) {
                await saveRoom(currentRoom, room, roomMessages, participants.get(currentRoom));
            }
        }
        io.to(currentRoom).emit('new-message', message);
    });

    socket.on('leave-room', async () => {
        if (currentRoom && socket.clientId) {
            const roomParticipants = participants.get(currentRoom);
            if (roomParticipants) {
                roomParticipants.delete(socket.clientId);
                const room = rooms.get(currentRoom);
                if (room) {
                    await saveRoom(currentRoom, room, messages.get(currentRoom), roomParticipants);
                }
            }
            socket.leave(currentRoom);
            io.to(currentRoom).emit('user-left', { clientId: socket.clientId });
            io.to(currentRoom).emit('participants', {
                clients: Array.from(roomParticipants || [])
            });
            currentRoom = null;
        }
    });

    socket.on('disconnect', async () => {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω: ${socket.clientId} (${socket.username})`);
        if (currentRoom && socket.clientId) {
            const roomParticipants = participants.get(currentRoom);
            if (roomParticipants) {
                roomParticipants.delete(socket.clientId);
                const room = rooms.get(currentRoom);
                if (room) {
                    await saveRoom(currentRoom, room, messages.get(currentRoom), roomParticipants);
                }
            }
            io.to(currentRoom).emit('user-left', { clientId: socket.clientId });
            io.to(currentRoom).emit('participants', {
                clients: Array.from(participants.get(currentRoom) || [])
            });
        }
    });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 38593;
async function startServer() {
    try {
        await loadData();
        server.listen(PORT, () => {
            console.log(`‚úÖ API-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}
startServer();
