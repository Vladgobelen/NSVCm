import UIManager from './UIManager.js';

class MembersManager {
    static members = new Map();

static updateMember(userId, updates) {
    if (this.members.has(userId)) {
        // üî¥üî¥üî¥ –ê–ì–†–ï–°–°–ò–í–ù–´–ô –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        console.group('üî¥üî¥üî¥ [DEBUG] MEMBERS MANAGER: updateMember CALLED');
        console.log('üéØ [DEBUG] TARGET userId:', userId);
        console.log('üéØ [DEBUG] UPDATES received:', JSON.stringify(updates, null, 2));
        console.log('üéØ [DEBUG] STATE BEFORE update:', JSON.stringify(this.members.get(userId), null, 2));
        console.groupEnd();

        const member = { ...this.members.get(userId), ...updates };
        this.members.set(userId, member);

        // üî¥üî¥üî¥ –ê–ì–†–ï–°–ò–í–ù–´–ô –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        console.group('üî¥üî¥üî¥ [DEBUG] MEMBERS MANAGER: updateMember FINISHED');
        console.log('üéØ [DEBUG] STATE AFTER update:', JSON.stringify(this.members.get(userId), null, 2));
        console.groupEnd();

        UIManager.updateMembersList(Array.from(this.members.values()));
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        UIManager.updateMemberMicState(userId, updates.isMicActive);
    }
}

// modules/MembersManager.js
static addMember(memberData) {
    if (!memberData.userId) {
        console.error('Member data must contain userId');
        return;
    }
    console.group('üî¥üî¥üî¥ [DEBUG] MEMBERS MANAGER: addMember CALLED');
    console.log('üéØ [DEBUG] RAW INPUT memberData:', JSON.stringify(memberData, null, 2));
    console.groupEnd();

    // üî¥üî¥üî¥ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    const existingMember = this.members.get(memberData.userId);
    let isCurrentlyOnline = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (existingMember) {
        isCurrentlyOnline = existingMember.isOnline;
        // üî¥üî¥üî¥ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∫–∞–∫ true.
        if (this.client && memberData.userId === this.client.userId) {
            isCurrentlyOnline = true;
        }
    }

    const processedMemberData = {
        userId: memberData.userId,
        username: memberData.username || `User_${memberData.userId.substr(0, 8)}`,
        isMicActive: memberData.isMicActive || false,
        isOnline: memberData.isOnline !== undefined ? memberData.isOnline : isCurrentlyOnline,
        clientId: memberData.clientId || null
    };

    console.group('üî¥üî¥üî¥ [DEBUG] MEMBERS MANAGER: addMember PROCESSED');
    console.log('üéØ [DEBUG] PROCESSED memberData:', JSON.stringify(processedMemberData, null, 2));
    console.groupEnd();

    this.members.set(processedMemberData.userId, processedMemberData);
    UIManager.updateMembersList(Array.from(this.members.values()));
}
    static removeMember(userId) {
        if (this.members.has(userId)) {
            this.members.delete(userId);
            UIManager.updateMembersList(Array.from(this.members.values()));
        }
    }

    static clearMembers() {
        this.members.clear();
        UIManager.updateMembersList([]);
    }

// modules/MembersManager.js

static updateAllMembers(members) {
    console.log('üéØ [MEMBERS MANAGER] updateAllMembers called. Replacing entire members list.');
    console.log('üéØ [MEMBERS MANAGER] New members list (in order):', members.map(m => `${m.username} (${m.isOnline ? 'ONLINE' : 'OFFLINE'})`));
    
    // ‚úÖ 1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∫–∞—Ä—Ç—É
    this.members.clear();
    
    // ‚úÖ 2. –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ –¢–û–ß–ù–û–ú –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    members.forEach(member => {
        this.members.set(member.userId, member);
    });
    
    // ‚úÖ 3. –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –≤ UI –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ `members`, –∞ –Ω–µ Array.from(this.members.values())
    // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –≤ UI –±—É–¥–µ—Ç –¢–û–ß–ù–û —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    UIManager.updateMembersList(members); // <-- –ü–µ—Ä–µ–¥–∞–µ–º `members`, –∞ –Ω–µ `Array.from(this.members.values())`
    
    console.log('‚úÖ [MEMBERS MANAGER] Members list fully replaced and rendered in correct order.');
}

static setupSocketHandlers(client) {
    if (!client.socket) return;

    client.socket.on('room-participants', (participants) => {
        this.updateAllMembers(participants);
    });

    // --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö user-joined ---
    client.socket.on('user-joined', async (user) => {
        console.log('User joined (ONLINE):', user);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (this.members.has(user.userId)) {
            // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
            this.updateMember(user.userId, { 
                ...user,
                isOnline: true 
            });
        } else {
            // –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.addMember({
                ...user,
                isOnline: true
            });
        }
        UIManager.addMessage('System', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ`);
    });

    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö user-left ---
    client.socket.on('user-left', async (data) => {
        console.log('User left:', data);
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        const member = MembersManager.getMember(data.userId);
        if (member) {
            UIManager.addMessage('System', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${member.username} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`);
        } else {
            UIManager.addMessage('System', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`);
        }
    });

    client.socket.on('user-mic-state', (data) => {
        if (data.userId) {
            this.updateMember(data.userId, { isMicActive: data.isActive });
        } else if (data.clientID) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ clientID
            const members = Array.from(this.members.values());
            const member = members.find(m => m.clientId === data.clientID);
            if (member) {
                this.updateMember(member.userId, { isMicActive: data.isActive });
            }
        }
    });
}


    static setupSSEHandlers() {
        console.log('SSE handlers for members are setup in TextChatManager');
    }

    static getMembers() {
        return Array.from(this.members.values());
    }

    static getMember(userId) {
        return this.members.get(userId);
    }

    static isCurrentUser(client, userId) {
        return client.userId === userId;
    }

    static initializeRoomMembers(client, participants) {
        console.log('Initializing room members with:', participants);
        this.clearMembers();
        participants.forEach(participant => this.addMember(participant));
    }
}

export default MembersManager;
