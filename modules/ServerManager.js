import UIManager from './UIManager.js';
import RoomManager from './RoomManager.js';

class ServerManager {
    static getLocalStorageKey(client) {
        return client.userId ? `voiceChatServers_${client.userId}` : null;
    }

    static saveServersToLocalStorage(client) {
        if (!client.userId) return;
        const key = this.getLocalStorageKey(client);
        const serversData = {
            servers: client.servers,
            timestamp: Date.now()
        };
        localStorage.setItem(key, JSON.stringify(serversData));
    }

    static loadServersFromLocalStorage(client) {
        if (!client.userId) return [];
        const key = this.getLocalStorageKey(client);
        const data = localStorage.getItem(key);
        if (data) {
            try {
                const serversData = JSON.parse(data);
                return serversData.servers || [];
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ localStorage', e);
                return [];
            }
        }
        return [];
    }

    static async loadServers(client) {
        try {
            let servers = [];
            
            try {
                const res = await fetch(`${client.API_SERVER_URL}/api/servers`, {
                    headers: { 'Authorization': `Bearer ${client.token}` }
                });
                if (res.ok) {
                    const data = await res.json();
                    servers = Array.isArray(data.servers) ? data.servers : [];
                }
            } catch (apiError) {
                console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å API, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage', apiError);
            }
            
            if (servers.length === 0) {
                servers = this.loadServersFromLocalStorage(client);
            }
            
            client.servers = servers;
            this.renderServers(client);
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
            return false;
        }
    }

    static renderServers(client) {
        const serversList = document.querySelector('.servers-list');
        if (!serversList) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç servers-list –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        serversList.innerHTML = '';
        
        if (client.servers.length === 0) {
            serversList.innerHTML = '<div class="no-results">–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤</div>';
            return;
        }
        
        client.servers.forEach(server => {
            const serverElement = document.createElement('div');
            serverElement.className = 'server-item';
            serverElement.dataset.server = server.id;
            
            const isOwner = server.ownerId === client.userId;
            const isMember = server.members && server.members.includes(client.userId);
            
            serverElement.innerHTML = `üè† ${server.name} ${isOwner ? '<span class="owner-badge">(–í—ã)</span>' : ''}`;
            
            serverElement.addEventListener('click', () => {
                console.log('–ö–ª–∏–∫ –ø–æ —Å–µ—Ä–≤–µ—Ä—É:', server.name);
                client.currentServerId = server.id;
                client.currentServer = server;
                
                // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º
                if (client.serverSearchInput) {
                    client.serverSearchInput.value = '';
                }
                
                setTimeout(() => {
                    RoomManager.loadRoomsForServer(client, server.id);
                    client.showPanel('rooms');
                }, 100);
            });
            
            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            const actionButtons = document.createElement('div');
            actionButtons.className = 'server-actions';
            
            if (isOwner) {
                // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
                const shareBtn = document.createElement('button');
                shareBtn.className = 'server-action-btn';
                shareBtn.innerHTML = 'üîó';
                shareBtn.title = '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å';
                shareBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const inviteLink = `${window.location.origin}${window.location.pathname}?invite=${server.id}`;
                    navigator.clipboard.writeText(inviteLink)
                        .then(() => alert(`–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${inviteLink}`))
                        .catch(err => console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:', err));
                });
                
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'server-action-btn';
                deleteBtn.innerHTML = '‚úï';
                deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å';
                deleteBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.deleteServer(client, server.id);
                });
                
                actionButtons.appendChild(shareBtn);
                actionButtons.appendChild(deleteBtn);
            } else if (isMember) {
                // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∏–¥–∞–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                const leaveBtn = document.createElement('button');
                leaveBtn.className = 'server-action-btn leave-btn';
                leaveBtn.innerHTML = 'üö™';
                leaveBtn.title = '–ü–æ–∫–∏–Ω—É—Ç—å —Å–µ—Ä–≤–µ—Ä';
                leaveBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.leaveServer(client, server.id);
                });
                
                actionButtons.appendChild(leaveBtn);
            }
            
            serverElement.appendChild(actionButtons);
            serversList.appendChild(serverElement);
        });
    }

    static async createServer(client) {
        const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:');
        if (!name || name.length < 3) {
            alert('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }
        
        try {
            const res = await fetch(`${client.API_SERVER_URL}/api/servers`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${client.token}`
                },
                body: JSON.stringify({ 
                    name: name.trim(), 
                    userId: client.userId, 
                    token: client.token 
                })
            });
            
            if (!res.ok) {
                const errorData = await res.json().catch(() => ({}));
                const errorMessage = errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä';
                
                if (errorMessage.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
                    alert(`–û—à–∏–±–∫–∞: ${errorMessage}. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.`);
                } else if (errorMessage.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç')) {
                    alert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
                } else {
                    throw new Error(errorMessage);
                }
                return;
            }
            
            const data = await res.json();
            const serverData = data.server;
            
            client.servers.push(serverData);
            this.saveServersToLocalStorage(client);
            this.renderServers(client);
            client.currentServerId = serverData.id;
            client.currentServer = serverData;
            
            await RoomManager.loadRoomsForServer(client, client.currentServerId);
            
        } catch (error) {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }

    static deleteServer(client, serverId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä? –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) return;
        
        const serverIndex = client.servers.findIndex(s => s.id === serverId);
        if (serverIndex !== -1) {
            const serverName = client.servers[serverIndex].name;
            client.servers = client.servers.filter(server => server.id !== serverId);
            this.saveServersToLocalStorage(client);
            this.renderServers(client);
            
            if (client.currentServerId === serverId) {
                client.currentServerId = null;
                client.currentServer = null;
            }
            
            UIManager.addMessage('System', `‚úÖ –°–µ—Ä–≤–µ—Ä "${serverName}" —É–¥–∞–ª–µ–Ω`);
        }
    }

    static async searchServers(client, query) {
        try {
            if (!query || query.length < 2) {
                // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
                this.renderServers(client);
                return;
            }

            const res = await fetch(`${client.API_SERVER_URL}/api/servers/search?q=${encodeURIComponent(query)}`, {
                headers: { 
                    'Authorization': `Bearer ${client.token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (!res.ok) {
                const errorData = await res.json().catch(() => ({}));
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
            }
            
            const data = await res.json();
            this.renderSearchResults(client, data.servers);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
            UIManager.showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message);
        }
    }

    static renderSearchResults(client, servers) {
        const serversList = document.querySelector('.servers-list');
        if (!serversList) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç servers-list –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        serversList.innerHTML = '';
        
        if (servers.length === 0) {
            serversList.innerHTML = '<div class="no-results">–°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        servers.forEach(server => {
            const serverElement = document.createElement('div');
            serverElement.className = 'server-item';
            serverElement.dataset.server = server.id;
            
            const isOwner = server.ownerId === client.userId;
            const isMember = client.servers.some(s => s.id === server.id);
            
            serverElement.innerHTML = `üè† ${server.name} ${isOwner ? '<span class="owner-badge">(–í—ã)</span>' : ''} ${!isMember ? '<span class="not-member-badge">(–ù–µ —É—á–∞—Å—Ç–Ω–∏–∫)</span>' : ''}`;
            
            if (isMember) {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫, —Ç–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–Ω–∞—Ç–∞–º
                serverElement.addEventListener('click', () => {
                    console.log('–ö–ª–∏–∫ –ø–æ —Å–µ—Ä–≤–µ—Ä—É –∏–∑ –ø–æ–∏—Å–∫–∞ (—É—á–∞—Å—Ç–Ω–∏–∫):', server.name);
                    client.currentServerId = server.id;
                    client.currentServer = server;
                    
                    // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º
                    if (client.serverSearchInput) {
                        client.serverSearchInput.value = '';
                    }
                    
                    setTimeout(() => {
                        RoomManager.loadRoomsForServer(client, server.id);
                        client.showPanel('rooms');
                    }, 100);
                });
            } else {
                // –ï—Å–ª–∏ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫, —Ç–æ –¥–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                serverElement.style.opacity = '0.7';
                serverElement.style.cursor = 'default';
                
                const joinBtn = document.createElement('button');
                joinBtn.className = 'server-action-btn join-btn';
                joinBtn.innerHTML = '‚ûï';
                joinBtn.title = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è';
                joinBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.joinServer(client, server.id);
                });
                
                serverElement.appendChild(joinBtn);
            }
            
            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
            if (isOwner) {
                const actionButtons = document.createElement('div');
                actionButtons.className = 'server-actions';
                
                const shareBtn = document.createElement('button');
                shareBtn.className = 'server-action-btn';
                shareBtn.innerHTML = 'üîó';
                shareBtn.title = '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å';
                shareBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const inviteLink = `${window.location.origin}${window.location.pathname}?invite=${server.id}`;
                    navigator.clipboard.writeText(inviteLink)
                        .then(() => alert(`–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${inviteLink}`))
                        .catch(err => console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:', err));
                });
                
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'server-action-btn';
                deleteBtn.innerHTML = '‚úï';
                deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å';
                deleteBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.deleteServer(client, server.id);
                });
                
                actionButtons.appendChild(shareBtn);
                actionButtons.appendChild(deleteBtn);
                serverElement.appendChild(actionButtons);
            }
            
            serversList.appendChild(serverElement);
        });
    }

    static async joinServer(client, serverId) {
        try {
            const res = await fetch(`${client.API_SERVER_URL}/api/servers/${serverId}/join`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${client.token}`
                },
                body: JSON.stringify({ userId: client.userId, token: client.token })
            });

            if (!res.ok) {
                const err = await res.json().catch(() => ({}));
                throw new Error(err.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è');
            }

            const data = await res.json();
            const server = data.server;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
            const exists = client.servers.some(s => s.id === server.id);
            if (!exists) {
                client.servers.push(server);
                this.saveServersToLocalStorage(client);
            }

            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
            if (client.serverSearchInput) {
                client.serverSearchInput.value = '';
            }

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            this.renderServers(client);
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–æ–≤
            client.showPanel('servers');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            UIManager.addMessage('System', `‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ "${server.name}"`);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–µ—Ä–≤–µ—Ä:', error);
            UIManager.showError(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: ${error.message}`);
        }
    }

    static async leaveServer(client, serverId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä?')) return;
        
        try {
            const res = await fetch(`${client.API_SERVER_URL}/api/servers/${serverId}/leave`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${client.token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (!res.ok) {
                const errorData = await res.json().catch(() => ({}));
                throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ—Ä–≤–µ—Ä');
            }
            
            // –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
            client.servers = client.servers.filter(server => server.id !== serverId);
            this.saveServersToLocalStorage(client);
            
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–º
            if (client.currentServerId === serverId) {
                client.currentServerId = null;
                client.currentServer = null;
            }
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
            this.renderServers(client);
            
            UIManager.addMessage('System', `‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Ä–≤–µ—Ä`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
            UIManager.showError('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }

    static clearSearchAndShowAllServers(client) {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        if (client.serverSearchInput) {
            client.serverSearchInput.value = '';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.renderServers(client);
    }
}

export default ServerManager;
